#include <stdio.h>
#include "vector.h"
#include "pair.h"
#include "hashmap.h"
#include "hash_funcs.h"
#include "pair_char_int.h"

void *elem_cpy (const void *elem){
  int *a = malloc (sizeof (int));
  *a = *((int *) elem);
  return a;
}
int elem_cmp (const void *elem_1, const void *elem_2){
  return *((const int *) elem_1) == *((const int *) elem_2);
}
void elem_free (void **elem){
  free (*elem);
}

#define PAIRS_NUM 3

int main (){
  pair *pairs[PAIRS_NUM];
  for (int i = 0; i<PAIRS_NUM; i++)
    {
      char key =(char) (i + 48);
      if (key%2)
        {
          key +=17;
        }
      int val = i;
      pairs[i] = pair_alloc(&key, &val, char_key_cpy, int_value_cpy,
                            char_key_cmp, int_value_cmp, char_key_free,
                            int_value_free);
    }
  for(int k = 0; k<PAIRS_NUM; k++)
    {
      printf("%c:%d\n", *((char*)pairs[k]->key), *((int*)pairs[k]->value));
    }

  hashmap *map = hashmap_alloc(hash_char);
  for(int j=0;j<PAIRS_NUM;j++)
    {
      hashmap_insert(map, pairs[j]);
      printf("cap:%zu, ", map->capacity);
    }
  printf("\n");
  for (int l = 0; l< PAIRS_NUM;l++)
    {
      char x = *(char*)pairs[l]->key;
      printf("%c:%d, ",x, *(int*)hashmap_at(map, pairs[l]->key));
    }
  printf("\n");
  hashmap_erase(map, pairs[1]->key);
  pair *tmp = NULL;
  for (int p = 0; p < map->capacity;p++)
    {
      for(int h = 0; h<map->buckets[p]->size; h++)
        {
          tmp = map->buckets[p]->data[h];
          printf("%c:%d, ", *(char*)tmp->key, *(int*)tmp->value);
        }
    }
  printf("\ncap:%zu\n", map->capacity);
  for(int h = 0; h< PAIRS_NUM; h++)
    {
      pair **pv = &(pairs[h]);
      pair_free((void**)pv);
    }
  hashmap_free(&map);
  printf("END\n");

  /*// Insert elements to vec.
  vector *vec = vector_alloc (elem_cpy, elem_cmp, elem_free);
  for (int i = 0; i < 8; ++i){
      vector_push_back (vec, &i);
    }
  vector_free (&vec);
  // Create Pairs.
  pair *pairs[8];
  for (int j = 0; j < 8; ++j){
      char key = (char) (j + 48);
      //even keys are capital letters, odd keys are digits
      if (key % 2){
          key += 17;
        }
      int value = j;
      pairs[j] = pair_alloc (&key, &value, char_key_cpy, int_value_cpy, char_key_cmp,int_value_cmp, char_key_free, int_value_free);
    }// Create hash-map and inserts elements into it, using pair_char_int.h
  hashmap *map= hashmap_alloc (hash_char);
  for (int k = 0; k < 8; ++k){
      hashmap_insert (map, pairs[k]);
    }
  //apply double_value on values where key is a digit
  char key_dig = '2', key_letter = 'D';
  printf ("map['2'] before apply if: %d, map['D'] before apply if: %d\n", *(int *) hashmap_at (map, &key_dig), *(int *) hashmap_at (map, &key_letter));
  int apply_if_res = hashmap_apply_if (map, is_digit, double_value);
  printf ("Number of changed values: %d\n", apply_if_res);
  printf ("map['2'] after apply if: %d, map['D'] after apply if: %d\n",
          *(int *) hashmap_at (map, &key_dig), *(int *) hashmap_at (map, &key_letter));
  // Free the pairs.
  for (int k_i = 0; k_i < 8; ++k_i){
      pair_free ((void **) &pairs[k_i]);
    }// Free the hash-map.
  hashmap_free (&map);
  printf("END\n");
  return 0;*/


  /*vector *vec = vector_alloc(elem_cpy, elem_cmp,elem_free);
  for (int k = 1; k<=3; k++)
    {
      vector_push_back(vec, &k);
    }
  printf("cap: %d\n", (int)vec->capacity);
  printf("in:\n");
  for(int i = 0; i< vec->size; i ++)
    {
      printf("%d, ", *((int*)vec->data[i]));
    }
  printf("\nv_at: %d\n", *((int*)vector_at(vec, 0)));
  int x = 3;
  printf("v_find: %d\n", vector_find(vec, &x));
  vector_erase(vec, 2);
  vector_erase(vec, 1);
  int p = 4;
  vector_push_back(vec, &p);
  printf("out:\n");
  for(int i = 0; i< vec->size; i ++)
    {
      printf("%d, ", *((int*)vec->data[i]));
    }
  printf("\n");
  vector_free(&vec);
  printf("END");*/
}

/*// Insert elements to vec.
  vector *vec = vector_alloc (elem_cpy, elem_cmp, elem_free);
  for (int i = 0; i < 8; ++i){
      vector_push_back (vec, &i);
    }
  vector_free (&vec);
  // Create Pairs.
  pair *pairs[8];
  for (int j = 0; j < 8; ++j){
      char key = (char) (j + 48);
      //even keys are capital letters, odd keys are digits
      if (key % 2){
          key += 17;
        }
      int value = j;
      pairs[j] = pair_alloc (&key, &value, char_key_cpy, int_value_cpy, char_key_cmp,int_value_cmp, char_key_free, int_value_free);
    }// Create hash-map and inserts elements into it, using pair_char_int.h
  hashmap *map= hashmap_alloc (hash_char);
  for (int k = 0; k < 8; ++k){
      hashmap_insert (map, pairs[k]);
    }
  //apply double_value on values where key is a digit
  char key_dig = '2', key_letter = 'D';
  int* x = (int *) hashmap_at (map, &key_dig);
  printf ("map['2'] before apply if: %d, map['D'] before apply if: %d\n", *(int *) hashmap_at (map, &key_dig), *(int *) hashmap_at (map, &key_letter));
  int apply_if_res = hashmap_apply_if (map, is_digit, double_value);
  printf ("Number of changed values: %d\n", apply_if_res);
  printf ("map['2'] after apply if: %d, map['D'] after apply if: %d\n",
          *(int *) hashmap_at (map, &key_dig), *(int *) hashmap_at (map, &key_letter));
  // Free the pairs.
  for (int k_i = 0; k_i < 8; ++k_i){
      pair_free ((void **) &pairs[k_i]);
    }// Free the hash-map.
  hashmap_free (&map);
  return 0;*/


  #include "hashmap.h"

  /**
  * initializes num buckets in the hashmap .
  * @param *map the hashmap.
  * @param *num num of buckets to initialize.
  * @return 1 if successful 0 if fail.
  */
  int init_buckets (hashmap *map, size_t num)
  {
    if (map == NULL || num < 1)
      {
        return 0;
      }
    if (num < map->capacity)
      {
        for (int i = 0; i<map->capacity; i++)
          {
            vector **vec = &map->buckets[i];
            vector_free(vec);
          }
      }
    map->buckets = realloc (map->buckets, sizeof (vector *) * num);
    for (int i = 0; i < num; ++i)  // initializes buckets to vectors
      {
        map->buckets[i] = vector_alloc (pair_copy, pair_cmp, pair_free);
      }
    return 1;
  }

  size_t get_hash (hashmap *map, const_keyT key)
  {
    size_t num_key = map->hash_func (key);
    size_t hash_key = num_key & (map->capacity - 1);
    return hash_key;
  }

  /**
  * updates the hashmap capacity.
  * @param *map the hashmap.
  * @param scale 1 if increase -1 if decrease.
  * @return 1 if successful 0 if fail.
  */

  int update_capacity (hashmap *hash_map, int scale)
  {
    double factor;
    if (scale == 1)
      {
        factor = HASH_MAP_GROWTH_FACTOR;
      }
    else
      {
        factor = (double) 1 / HASH_MAP_GROWTH_FACTOR;
      }
    pair *p = NULL;
    pair **saved_pairs = malloc (sizeof (pair) * hash_map->size);
    if (saved_pairs == NULL)
      {
        return 0;
      }
    int pair_ind = 0;
    for (int i = 0; i < hash_map->capacity; ++i)
      {
        for (int j = 0; j < hash_map->buckets[i]->size; ++j)
          {
            p = hash_map->buckets[i]->data[j];
            saved_pairs[pair_ind] = pair_copy (p);
            pair_ind++;
          }
      }
    for (int k = 0; k < hash_map->capacity; ++k)
      {
        vector_clear (hash_map->buckets[k]);
      }
    hash_map->size = 0;
    init_buckets (hash_map, hash_map->capacity*factor);
    hash_map->capacity = hash_map->capacity * factor;
    for (int m = 0; m < pair_ind; ++m)
      {
        size_t new_key_hash = get_hash (hash_map, saved_pairs[m]->key);
        vector_push_back (hash_map->buckets[new_key_hash], saved_pairs[m]);
        hash_map->size++;
      }
    for(int h = 0; h< hash_map->size; h++)
      {
        pair **pv = &(saved_pairs[h]);
        pair_free((void**)pv);
      }
    free(saved_pairs);
    return 1;
  }

  /**
   * Allocates dynamically new hash map element.
   * @param func a function which "hashes" keys.
   * @return pointer to dynamically allocated hashmap.
   * @if_fail return NULL.
   */
  hashmap *hashmap_alloc (hash_func func)
  {
    hashmap *new = malloc (sizeof (hashmap));
    if (new == NULL)
      {
        return NULL;
      }
    new->capacity = HASH_MAP_INITIAL_CAP;
    new->buckets = NULL;
    init_buckets (new, HASH_MAP_INITIAL_CAP);
    new->size = 0;
    new->hash_func = func;
    return new;
  }

  /**
   * Frees a hash map and the elements the hash map itself allocated.
   * @param p_hash_map pointer to dynamically allocated pointer to hash_map.
   */
  void hashmap_free (hashmap **p_hash_map)
  {
    if (p_hash_map !=NULL)
      {
        for (int i = 0; i<(*p_hash_map)->capacity; i++)
          {
            vector **vec = &(*p_hash_map)->buckets[i];
            vector_free(vec);
          }
        free((*p_hash_map)->buckets);
        free(*p_hash_map);
        p_hash_map = NULL;
      }
  }

  /**
   * Inserts a new in_pair to the hash map.
   * The function inserts *new*, *copied*, *dynamically allocated* in_pair,
   * NOT the in_pair it receives as a parameter.
   * @param hash_map the hash map to be inserted with new element.
   * @param in_pair a in_pair the hash map would contain.
   * @return returns 1 for successful insertion, 0 otherwise.
   */
  int hashmap_insert (hashmap *hash_map, const pair *in_pair)
  {
    if (hash_map == NULL || in_pair == NULL)
      {
        return 0;
      }
    if (hashmap_at (hash_map, in_pair->key))  // if key already in hashmap
      {
        return 0;
      }
    size_t key_hash = get_hash (hash_map, in_pair->key);
    vector_push_back (hash_map->buckets[key_hash], in_pair);
    hash_map->size++;
    if (hashmap_get_load_factor (hash_map) > HASH_MAP_MAX_LOAD_FACTOR)
      {
        if (!update_capacity (hash_map, 1))
          {
            return 0;
          }
      }
    return 1;
  }

  /**
   * The function returns the value associated with the given key.
   * @param hash_map a hash map.
   * @param key the key to be checked.
   * @return the value associated with key if exists, NULL otherwise (the value itself,
   * not a copy of it).
   */
  valueT hashmap_at (const hashmap *hash_map, const_keyT key)
  {
    if (hash_map == NULL)
      {
        return NULL;
      }
    size_t num_key = hash_map->hash_func (key);
    size_t hash_key = num_key & (hash_map->capacity - 1);
    pair *value = NULL;
    int i;
    for (i = 0; i < hash_map->buckets[hash_key]->size; i++)
      {
        value = hash_map->buckets[hash_key]->data[i];
        if (value->key_cmp (key, value->key))
          {
            return value->value;
          }
      }
    if (i >= hash_map->buckets[hash_key]->size)
      {
        return NULL;
      }
    return NULL;
  }

  /**
   * The function erases the pair associated with key.
   * @param hash_map a hash map.
   * @param key a key of the pair to be erased.
   * @return 1 if the erasing was done successfully, 0 otherwise. (if key not in map,
   * considered fail).
   */
  int hashmap_erase (hashmap *hash_map, const_keyT key)
  {
    if (hash_map == NULL)
      {
        return 0;
      }
    size_t hash_key = get_hash (hash_map, key);
    if (hash_map->buckets[hash_key]->size <= 0)
      {
        return 0;
      }
    int ind = -1;
    pair *p = NULL;
    for (int j = 0; j < hash_map->buckets[hash_key]->size; ++j)
      {
        p = hash_map->buckets[hash_key]->data[j];
        if (p->key_cmp (p->key, key))
          {
            ind = j;
            break;
          }
      }
    if (ind == -1)
      {
        return 0;
      }
    vector_erase (hash_map->buckets[hash_key], ind);
    hash_map->size--;
    if (hashmap_get_load_factor (hash_map) < HASH_MAP_MIN_LOAD_FACTOR)
      {
        update_capacity (hash_map, -1);
      }
    return 1;
  }

  /**
   * This function returns the load factor of the hash map.
   * @param hash_map a hash map.
   * @return the hash map's load factor, -1 if the function failed.
   */
  double hashmap_get_load_factor (const hashmap *hash_map)
  {
    return (double) hash_map->size / hash_map->capacity;
  }

  /**
   * This function receives a hashmap and 2 functions, the first checks a condition on the keys,
   * and the seconds apply some modification on the values. The function should apply the modification
   * only on the values that are associated with keys that meet the condition.
   *
   * Example: if the hashmap maps char->int, keyT_func checks if the char is a capital letter (A-Z),
   * and val_t_func multiples the number by 2, hashmap_apply_if will change the map:
   * {('C',2),('#',3),('X',5)}, to: {('C',4),('#',3),('X',10)}, and the return value will be 2.
   * @param hash_map a hashmap
   * @param keyT_func a function that checks a condition on keyT and return 1 if true, 0 else
   * @param valT_func a function that modifies valueT, in-place
   * @return number of changed values
   */
  int hashmap_apply_if (const hashmap *hash_map,
                        keyT_func keyT_func, valueT_func valT_func)//const
  {
    if (hash_map == NULL || keyT_func == NULL || valT_func == NULL)
      {
        return -1;
      }
    pair *p = NULL;
    int counter = 0;
    for (int i = 0; i < hash_map->capacity; i++)
      {
        for (int j = 0; j < hash_map->buckets[i]->size; j++)
          {
            p = hash_map->buckets[i]->data[j];
            if (keyT_func (p->key))
              {
                valT_func (p->value);
                counter++;
              }
          }
      }
    return counter;
  }



#ifndef HASHMAP_H_
#define HASHMAP_H_

#include <stdlib.h>
#include "vector.h"
#include "pair.h"

/**
 * @def HASH_MAP_INITIAL_CAP
 * The initial capacity of the hash map.
 * It means, the initial number of <b> vectors </b> the hash map has.
 */
#define HASH_MAP_INITIAL_CAP 16UL

/**
 * @def HASH_MAP_GROWTH_FACTOR
 * The growth factor of the hash map.
 * Example: hash_map(size=16),
 *          hash_map.add([16 elements]) ->
 *          hash_map(size=32)
 */
#define HASH_MAP_GROWTH_FACTOR 2UL

/**
 * @def HASH_MAP_MIN_LOAD_FACTOR
 * The minimal load factor the hash map can be in.
 * Example: if the hash_map capacity is 16,
 * and it has 4 elements in it (size is 4),
 * if an element is erased, the load factor drops below 0.25,
 * so the hash map should be minimized (to 8 vectors).
 */
#define HASH_MAP_MIN_LOAD_FACTOR 0.25

/**
 * @def HASH_MAP_MAX_LOAD_FACTOR
 * The maximal load factor the hash map can be in.
 * Example: if the hash_map capacity is 16,
 * and it has 12 elements in it (size is 12),
 * if another element is added, the load factor goes above 0.75,
 * so the hash map should be extended (to 32 vectors).
 */
#define HASH_MAP_MAX_LOAD_FACTOR 0.75

/**
 * @typedef hash_func
 * This type of function receives a keyT and returns
 * a representational number of it.
 * Example: lets say we have a pair ('Joe', 78) that we want to store in the hash map,
 * the key is 'Joe' so it determines the bucket in the hash map,
 * his index would be:  size_t ind = hash_func('Joe') & (capacity - 1);
 */
typedef size_t (*hash_func) (const_keyT);


/**
 * @typedef keyT_func
 * A function that receives a const_keyT, and returns 1 if it fulfills some condition, and 0 else
 */
typedef int (*keyT_func) (const_keyT);

/**
 * @typedef valueT_func
 * A function that changes the value of a valueT, in-place
 */
typedef void (*valueT_func) (valueT);

/**
 * @struct hashmap
 * @param buckets dynamic array of vectors which stores the values.
 * @param size the number of elements (pairs) stored in the hash map.
 * @param capacity the number of buckets in the hash map.
 * @param hash_func a function which "hashes" keys.
 */
typedef struct hashmap {
    vector **buckets;
    size_t size;
    size_t capacity; // num of buckets
    hash_func hash_func;
} hashmap;

/**
 * Allocates dynamically new hash map element.
 * @param func a function which "hashes" keys.
 * @return pointer to dynamically allocated hashmap.
 * @if_fail return NULL.
 */
hashmap *hashmap_alloc (hash_func func);

/**
 * Frees a hash map and the elements the hash map itself allocated.
 * @param p_hash_map pointer to dynamically allocated pointer to hash_map.
 */
void hashmap_free (hashmap **p_hash_map);

/**
 * Inserts a new in_pair to the hash map.
 * The function inserts *new*, *copied*, *dynamically allocated* in_pair,
 * NOT the in_pair it receives as a parameter.
 * @param hash_map the hash map to be inserted with new element.
 * @param in_pair a in_pair the hash map would contain.
 * @return returns 1 for successful insertion, 0 otherwise.
 */
int hashmap_insert (hashmap *hash_map, const pair *in_pair);

/**
 * The function returns the value associated with the given key.
 * @param hash_map a hash map.
 * @param key the key to be checked.
 * @return the value associated with key if exists, NULL otherwise (the value itself,
 * not a copy of it).
 */
valueT hashmap_at (const hashmap *hash_map, const_keyT key);

/**
 * The function erases the pair associated with key.
 * @param hash_map a hash map.
 * @param key a key of the pair to be erased.
 * @return 1 if the erasing was done successfully, 0 otherwise. (if key not in map,
 * considered fail).
 */
int hashmap_erase (hashmap *hash_map, const_keyT key);

/**
 * This function returns the load factor of the hash map.
 * @param hash_map a hash map.
 * @return the hash map's load factor, -1 if the function failed.
 */
double hashmap_get_load_factor (const hashmap *hash_map);

/**
 * This function receives a hashmap and 2 functions, the first checks a condition on the keys,
 * and the seconds apply some modification on the values. The function should apply the modification
 * only on the values that are associated with keys that meet the condition.
 *
 * Example: if the hashmap maps char->int, keyT_func checks if the char is a capital letter (A-Z),
 * and val_t_func multiples the number by 2, hashmap_apply_if will change the map:
 * {('C',2),('#',3),('X',5)}, to: {('C',4),('#',3),('X',10)}, and the return value will be 2.
 * @param hash_map a hashmap
 * @param keyT_func a function that checks a condition on keyT and return 1 if true, 0 else
 * @param valT_func a function that modifies valueT, in-place
 * @return number of changed values
 */
int hashmap_apply_if (const hashmap *hash_map, keyT_func keyT_func, valueT_func valT_func);//const
#endif //HASHMAP_H_



#include "pair.h"

/**
 * Allocates dynamically a new pair.
 * @param key, value - the key and value.
 * @param key_cpy, value_cpy - copy functions for key and value.
 * @param key_cmp, value_cmp - compare functions for key and value.
 * @param key_free, value_free - free functions for key and value.
 * @return dynamically allocated pair.
 */
pair *pair_alloc (
    const_keyT key, const_valueT value,
    const pair_key_cpy key_cpy, const pair_value_cpy value_cpy,
    const pair_key_cmp key_cmp, const pair_value_cmp value_cmp,
    const pair_key_free key_free, const pair_value_free value_free)
{
  pair *p = malloc (sizeof (pair));
  p->key = key_cpy (key);
  p->value = value_cpy (value);
  p->key_cpy = key_cpy;
  p->value_cpy = value_cpy;
  p->key_cmp = key_cmp;
  p->value_cmp = value_cmp;
  p->key_free = key_free;
  p->value_free = value_free;
  return p;
}

/**
 * Creates a new (dynamically allocated) copy of the given old_pair.
 * @param old_pair old_pair to be copied.
 * @return new dynamically allocated old_pair if succeeded, NULL otherwise.
 */
void *pair_copy (const void *p)
{
  if (!p)
    {
      return NULL;
    }
  const pair *old_pair = (const pair *) p;
  pair *new_pair = pair_alloc (old_pair->key, old_pair->value,
                               old_pair->key_cpy, old_pair->value_cpy,
                               old_pair->key_cmp, old_pair->value_cmp,
                               old_pair->key_free, old_pair->value_free);
  return new_pair;
}


int pair_cmp (const void *p1, const void *p2)
{
  if (!p1 || !p2)
    {
      return 0;
    }
  const pair *pair1 = (const pair *) p1;
  const pair *pair2 = (const pair *) p2;

  int key_cmp = pair1->key_cmp (pair1->key, pair2->key);
  int val_cmp = pair1->value_cmp (pair1->value, pair2->value);
  return key_cmp && val_cmp;
}

/**
 * This function frees a pair and everything it allocated dynamically.
 * @param p_pair pointer to dynamically allocated pair to be freed.
 */
void pair_free (void ** p)
{
  if (!p || !(*p))
    {
      return;
    }

  pair **p_pair = (pair **) p;
  (*p_pair)->key_free (&(*p_pair)->key);
  (*p_pair)->value_free (&(*p_pair)->value);
  free (*p_pair);
  *p_pair = NULL;
}




#include "vector.h"
#include <string.h>

/**
 * Dynamically allocates a new vector.
 * @param elem_copy_func func which copies the element stored in the vector (returns
 * dynamically allocated copy).
 * @param elem_cmp_func func which is used to compare elements stored in the vector.
 * @param elem_free_func func which frees elements stored in the vector.
 * @return pointer to dynamically allocated vector.
 * @if_fail return NULL.
 */
vector *vector_alloc (vector_elem_cpy elem_copy_func,
                      vector_elem_cmp elem_cmp_func,
                      vector_elem_free elem_free_func)
{
  vector *new_vec = malloc (sizeof (vector));
  if (new_vec == NULL || elem_copy_func == NULL || elem_cmp_func == NULL
      || elem_free_func == NULL)
    {
      return NULL;
    }
  new_vec->capacity = VECTOR_INITIAL_CAP;
  new_vec->size = 0;
  new_vec->data = malloc (sizeof (void *) * new_vec->capacity);
  if (new_vec->data == NULL)
    {
      free (new_vec);
      return NULL;
    }
  new_vec->elem_copy_func = elem_copy_func;
  new_vec->elem_cmp_func = elem_cmp_func;
  new_vec->elem_free_func = elem_free_func;
  return new_vec;
}

/**
 * Frees a vector and the elements the vector itself allocated.
 * @param p_vector pointer to dynamically allocated pointer to vector.
 */
void vector_free (vector **p_vector)
{
  if( p_vector!= NULL)
    {
      for (int i = 0; i < (*p_vector)->size; i++)
        {
          void *tmp = vector_at(*p_vector, i);
          (*p_vector)->elem_free_func (&tmp);
        }
      free ((*p_vector)->data);
      free (*p_vector);
      p_vector = NULL;
    }
}

/**
 * Returns the element at the given index.
 * @param vector pointer to a vector.
 * @param ind the index of the element we want to get.
 * @return the element at the given index if exists (the element itself, not a copy of it),
 * NULL otherwise.
 */
void *vector_at (const vector *vector, size_t ind)
{
  if (vector == NULL || ind > vector->size)
    {
      return NULL;
    }
  return vector->data[ind];
}

/**
 * Gets a value and checks if the value is in the vector.
 * @param vector a pointer to vector.
 * @param value the value to look for.
 * @return the index of the given value if it is in the vector ([0, vector_size - 1]).
 * Returns -1 if no such value in the vector.
 */
int vector_find (const vector *vector, const void *value)
{
  if (vector!= NULL)
    {
      for (int i = 0; i < vector->size; i++)
        {
          if (vector->elem_cmp_func (value, vector->data[i]))
            {
              return i;
            }
        }
    }
  return -1;
}

/**
 * Adds a new value to the back (index vector_size) of the vector.
 * @param vector a pointer to vector.
 * @param value the value to be added to the vector.
 * @return 1 if the adding has been done successfully, 0 otherwise.
 */
int vector_push_back (vector *vector, const void *value)
{
  if (vector == NULL)
    {
      return 0;
    }
  vector->data[vector->size] = vector->elem_copy_func (value);
  vector->size++;
  if (vector_get_load_factor (vector) > VECTOR_MAX_LOAD_FACTOR)
    {
      void **tmp = realloc (vector->data,
                            sizeof (void *) * (vector->capacity*2));
      if (tmp == NULL)
        {
          return 0;
        }
      vector->data = tmp;
      vector->capacity = vector->capacity * VECTOR_GROWTH_FACTOR;
    }
  return 1;
}

/**
 * This function returns the load factor of the vector.
 * @param vector a vector.
 * @return the vector's load factor, -1 if the function failed.
 */
double vector_get_load_factor (const vector *vector)
{
  if (vector == NULL)
    {
      return -1;
    }
  return (float) vector->size / vector->capacity;
}

/**
 * Removes the element at the given index from the vector. alters the indices of the remaining
 * elements so that there are no empty indices in the range [0, size-1] (inclusive).
 * @param vector a pointer to vector.
 * @param ind the index of the element to be removed.
 * @return 1 if the removing has been done successfully, 0 otherwise.
 */
int vector_erase (vector *vector, size_t ind)
{
  if (ind > vector->size - 1)
    {
      return 0;
    }
  void *tmp = vector_at(vector, ind);
  vector->elem_free_func(&tmp);
  for (int i = ind; i < vector->size - 1; i++)
    {
      vector->data[i] = vector->data[i+1];
    }
  vector->size--;
  if (vector_get_load_factor (vector) < VECTOR_MIN_LOAD_FACTOR)
    {
      void **tmp2 = realloc (vector->data,
                            sizeof (void *) * (vector->capacity/2));
      if (tmp2 == NULL)
        {
          return 0;
        }
      vector->data = tmp2;
      vector->capacity = vector->capacity / 2;
    }
  return 1;
}

/**
 * Deletes all the elements in the vector.
 * @param vector vector a pointer to vector.
 */
void vector_clear (vector *vector)
{
  if (vector != NULL)
    {
      for (int i = (int) vector->size - 1; i >= 0; i--)
        {
          vector_erase (vector, i);
        }
    }
}




#ifndef PAIR_H_
#define PAIR_H_

#include <stdlib.h>

/**
 * @typedef keyT, valueT, const_keyT, const_valueT
 * typedef for the key and value elements in the pair, both regular and const versions.
 */
typedef void *keyT;
typedef const void *const_keyT;
typedef void *valueT;
typedef const void *const_valueT;

/**
 * @typedef pair_key_cpy, pair_value_cpy
 * Copy (dynamically) functions for the key and the value.
 */
typedef keyT (*pair_key_cpy) (const_keyT);
typedef valueT (*pair_value_cpy) (const_valueT);

/**
 * @typedef pair_key_cmp, pair_value_cmp
 * Compare functions for the key and the value. returns 1 if same, else - 0.
 */
typedef int (*pair_key_cmp) (const_keyT, const_keyT);
typedef int (*pair_value_cmp) (const_valueT, const_valueT);

/**
 * @typedef pair_key_free, pair_value_free
 * Free functions for the key and the value.
 */
typedef void (*pair_key_free) (keyT *);
typedef void (*pair_value_free) (valueT *);

/**
 * @struct pair - represent a pair '''{key: value}'''.
 * @param key, value - the key and value.
 * @param key_cpy, value_cpy - copy functions for key and value.
 * @param key_cmp, value_cmp - compare functions for key and value.
 * @param key_free, value_free - free functions for key and value.
 */
typedef struct pair {
    keyT key;
    valueT value;
    pair_key_cpy key_cpy;
    pair_value_cpy value_cpy;
    pair_key_cmp key_cmp;
    pair_value_cmp value_cmp;
    pair_key_free key_free;
    pair_value_free value_free;
} pair;

/**
 * Allocates dynamically a new pair.
 * @param key, value - the key and value.
 * @param key_cpy, value_cpy - copy functions for key and value.
 * @param key_cmp, value_cmp - compare functions for key and value.
 * @param key_free, value_free - free functions for key and value.
 * @return dynamically allocated pair.
 */
pair *pair_alloc (
    const_keyT key, const_valueT value,
    pair_key_cpy key_cpy, pair_value_cpy value_cpy,
    pair_key_cmp key_cmp, pair_value_cmp value_cmp,
    pair_key_free key_free, pair_value_free value_free);

/**
 * Creates a new (dynamically allocated) copy of the given old_pair.
 * @param old_pair old_pair to be copied.
 * @return new dynamically allocated old_pair if succeeded, NULL otherwise.
 */
void *pair_copy (const void *p);

/**
 * Compares two pairs
 * @param pair1 first pair
 * @param pair2 second pair
 * @return 1 if pairs are equal on key and value, 0 else
 */
int pair_cmp(const void *p1, const void *p2);

/**
 * This function frees a pair and everything it allocated dynamically.
 * @param p_pair pointer to dynamically allocated pair to be freed.
 */
void pair_free (void **p);

#endif //PAIR_H_


#ifndef HASHFUNCS_H_
#define HASHFUNCS_H_

#include <stdlib.h>

/**
 * Integers simple hash func.
 */
size_t hash_int(const void *elem){
    size_t hash = *((int *) elem);
    return hash;
}

/**
 * Chars simple hash func.
 */
size_t hash_char(const void *elem){
    size_t hash = *((char *) elem);
    return hash;
}

/**
 * Doubles simple hash func.
 */
size_t hash_double(const void *elem){
    size_t hash = *((double *) elem);
    return hash;
}

#endif // HASHFUNCS_H_


/**
 * Pairs like { char: int }
 * The key type is char *.
 * The value type is int *.
 */

#ifndef PAIRCHARINT_H_
#define PAIRCHARINT_H_

#include <stdlib.h>
#include "pair.h"

/**
 * Copies the char key of the pair.
 */
void *char_key_cpy (const_keyT key)
{
  char *new_char = malloc (sizeof (char));
  *new_char = *((char *) key);
  return new_char;
}

/**
 * Copies the int value of the pair.
 */
void *int_value_cpy (const_valueT value)
{
  int *new_int = malloc (sizeof (int));
  *new_int = *((int *) value);
  return new_int;
}

/**
 * Compares the char key of the pair.
 */
int char_key_cmp (const_keyT key_1, const_keyT key_2)
{
  return *(char *) key_1 == *(char *) key_2;
}

/**
 * Compares the int value of the pair.
 */
int int_value_cmp (const_valueT val_1, const_valueT val_2)
{
  return *(int *) val_1 == *(int *) val_2;
}

/**
 * Frees the char key of the pair.
 */
void char_key_free (keyT* key)
{
  if (key && *key)
    {
      free (*key);
      *key = NULL;
    }
}

/**
 * Frees the int value of the pair.
 */
void int_value_free (valueT *val)
{
  if (val && *val)
    {
      free (*val);
      *val = NULL;
    }
}


/**
 * @param elem pointer to a char (keyT of pair_char_int)
 * @return 1 if the char represents a digit, else - 0
 */
int is_digit (const_keyT elem)
{
  char c = *((char *) elem);
  return (c > 47 && c < 58);
}

/**
 * doubles the value pointed to by the given pointer
 * @param elem pointer to an integer (valT of pair_char_int)
 */
void double_value (valueT elem)
{
  *((int *) elem) *= 2;
}

#endif //PAIRCHARINT_H_
